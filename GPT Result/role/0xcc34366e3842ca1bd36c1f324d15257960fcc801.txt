contract Ownable {
  address public owner;


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
}

contract Authorizable is Ownable {

  address[] authorizers;
  mapping(address => uint) authorizerIndex;

  /**
   * @dev Throws if called by any account tat is not authorized.
   */
  modifier onlyAuthorized {
    require(isAuthorized(msg.sender));
    _;
  }  
  /**
   * @dev Allows the current owner to update multiple rates.
   * @param data an array that alternates keccak256 hashes of the symbol and the corresponding rate .
   */
  function updateRates(uint[] data) public onlyAuthorized {
    require(data.length % 2 == 0);
    uint i = 0;
    while (i < data.length / 2) {
      bytes32 symbol = bytes32(data[i * 2]);
      uint rate = data[i * 2 + 1];
      rates[symbol] = rate;
      RateUpdated(now, symbol, rate);
      i++;
    }
  }
}